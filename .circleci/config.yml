version: 2.1
orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@4.1.0
  slack: circleci/slack@3.4.2
  docker: circleci/docker@1.5.0
executors:
  base:
    docker:
      - image: cimg/ruby:2.6.6-node
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          BUNDLE_APP_CONFIG: .bundle
      - image: circleci/postgres:12.0-alpine
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          TZ: "Asia/Tokyo"
          POSTGRES_USER: root
          POSTGRES_DB: test_sample_db
          POSTGRES_PASSWORD: ""
    environment:
      - RAILS_ENV: test
    working_directory: ~/dodonki1223/eroge_release_db

commands:
  # Yarn系のパッケージのインストール関連のコマンド
  install-yarn-packages:
    steps:
      - node/install-packages:
          pkg-manager: yarn

  # テストDB設定関連のコマンド
  # https://circleci.com/docs/ja/2.0/postgres-config/
  test-db-settings:
    steps:
      - run:
          name: Create test database
          command: |
            cp config/{database_circleci,database}.yml
            bin/rails db:schema:load --trace

  # ワークスペース関連のコマンド
  save-workspace:
    steps:
      - persist_to_workspace:
          root: .
          paths: .
  using-workspace:
    steps:
      - attach_workspace:
          at: .

  # Linter関連のコマンド
  linter:
    steps:
      - run:
          name: Rubocop
          command: bundle exec rubocop --require rubocop-rspec -D -P
      - run:
          name: Rails Best Practices
          command: bundle exec rails_best_practices .
      - run:
          name: Brakeman
          command: bundle exec brakeman

  # テスト関連コマンド
  testing:
    steps:
      - run:
          name: Run all RSpec
          command: bundle exec rspec --format progress

  # テストカバレッジ関連のコマンド
  # https://circleci.com/docs/2.0/code-coverage/#ruby
  # https://github.com/colszowka/simplecov/#getting-started
  store-coverage:
    steps:
      - store_artifacts:
          path: coverage
          destination: coverage-results

  # ドキュメント関連コマンド
  development-db-settings:
    steps:
      - run:
          name: Create development database
          command: |
            cp config/{database_circleci,database}.yml
            RAILS_ENV=development bin/rails db:schema:load --trace
  generate-entity-relationship-diagrams:
    steps:
      - run:
          name: Install graphviz
          command: |
            sudo apt-get update
            sudo apt-get install graphviz
      - run:
          name: Run Rails ERD
          command: RAILS_ENV=development bin/rake erd
  store-entity-relationship-diagrams:
    steps:
      - store_artifacts:
          path: db/erd/eroge_release_db.png
          destination: db/erd/eroge_release_db.png

  # デプロイ関連コマンド
  deploy-db-settings:
    steps:
      - run:
          name: Set deploy db settings(Rewrite database.yml)
          command: cp config/{database_circleci_deploy,database}.yml
  bastion-port-forwarding:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "09:73:fb:0a:d8:e2:b9:0c:e8:7c:23:7e:65:c0:1c:44"
      - run:
          name: Bastion server port forwarding
          # 「-o StrictHostKeyChecking=no」は下記の対話処理を省略するために追加
          #   The authenticity of host 'hoge (fuga)' can't be established.
          #   RSA key fingerprint is hoge
          #   Are you sure you want to continue connecting (yes/no)? 
          command: ssh -o StrictHostKeyChecking=no -f -N -L ${EROGE_RELEASE_DB_LOCAL_PORT}:${EROGE_RELEASE_DB_HOST}:${EROGE_RELEASE_DB_PORT} ${STEPPING_STONE_SERVER_USER}@${STEPPING_STONE_SERVER_HOST}
  deploy-notification:
    steps:
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH ブランチのデプロイが完了しました\n:github_octocat: User: $CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH ブランチのデプロイが失敗しました\n:github_octocat: User: $CIRCLE_USERNAME'
  migration-db:
    steps:
      # master.keyを環境変数から作成する
      # https://railsguides.jp/5_2_release_notes.html#credential%E7%AE%A1%E7%90%86
      - run:
          name: Create master.key file
          command: echo $RAILS_MASTER_KEY > config/master.key
      - run:
          name: DB migration
          command: RAILS_ENV=production bin/rake db:migrate

jobs:
  setup:
    executor: base
    steps:
      - checkout
      - ruby/install-deps:
          key: gems-v2
      - install-yarn-packages
      - test-db-settings
      - save-workspace
  lint:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps:
          key: gems-v2
      - linter
  test:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps:
          key: gems-v2
      - testing
      - store-coverage
  document:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps:
          key: gems-v2
      - development-db-settings
      - generate-entity-relationship-diagrams
      - store-entity-relationship-diagrams
  deploy:
    executor: base
    steps:
      - using-workspace
      - ruby/install-deps:
          key: gems-v2
      - deploy-db-settings
      - bastion-port-forwarding
      - migration-db
      - deploy-notification

workflows:
  version: 2.1
  main:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      # 詳しくはドキュメントを確認
      #   https://circleci.com/orbs/registry/orb/circleci/docker
      - docker/hadolint:
          dockerfiles: .dockerdev/Dockerfile
          requires:
            - setup
      - test:
          requires:
            - setup
      - document:
          requires:
            - setup
      - slack/approval-notification:
          message: ':circleci-pass: $CIRCLE_BRANCH ブランチのデプロイ準備が整っています\n:github_octocat: User: $CIRCLE_USERNAME\nデプロイを実行する場合は *Approve* を押してください'
          requires:
            - lint
            - test
          filters:
            branches:
              only: master
      - approval-job:
          # approvalの仕様がよくわかんなかったがこの記事である程度理解した
          # https://qiita.com/wasnot/items/baeb5862da83e658da86
          # https://circleci.com/docs/2.0/workflows/#holding-a-workflow-for-a-manual-approval
          type: approval
          requires:
            - slack/approval-notification
      - deploy:
          requires:
            - approval-job
